//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Parser.sm
//

#include "Parser.h"
#include "Parser_sm.h"

using namespace statemap;

// Static class declarations.
StateMap_unexpected StateMap::unexpected("StateMap::unexpected", 0);
StateMap_start StateMap::start("StateMap::start", 1);
StateMap_word_state StateMap::word_state("StateMap::word_state", 2);
StateMap_double_dot_state StateMap::double_dot_state("StateMap::double_dot_state", 3);
StateMap_eq_state StateMap::eq_state("StateMap::eq_state", 4);
StateMap_number_state StateMap::number_state("StateMap::number_state", 5);
StateMap_oper_state StateMap::oper_state("StateMap::oper_state", 6);
StateMap_white_space_state StateMap::white_space_state("StateMap::white_space_state", 7);

void ParserState::next(ParserContext& context)
{
    Default(context);
}

void ParserState::Default(ParserContext& context)
{
    throw (
        TransitionUndefinedException(
            (context.getState()).getName(),
            context.getTransition()));

}

void StateMap_Default::next(ParserContext& context)
{

    context.getState().Exit(context);
    context.setState(StateMap::unexpected);
    context.getState().Entry(context);


}

void StateMap_unexpected::next(ParserContext& context)
{
    Parser& ctxt = context.getOwner();

    if ( ctxt.peek() == '\n')
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.unacceptable();
            context.setState(StateMap::start);
        }
        catch (...)
        {
            context.setState(StateMap::start);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         StateMap_Default::next(context);
    }


}

void StateMap_start::next(ParserContext& context)
{
    Parser& ctxt = context.getOwner();

    if ( isalpha(ctxt.peek()) )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.token_start();
            ctxt.increase_state();
            ctxt.consume();
            context.setState(StateMap::word_state);
        }
        catch (...)
        {
            context.setState(StateMap::word_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.peek() == ' ')

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.consume();
            context.setState(StateMap::white_space_state);
        }
        catch (...)
        {
            context.setState(StateMap::white_space_state);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         StateMap_Default::next(context);
    }


}

void StateMap_word_state::next(ParserContext& context)
{
    Parser& ctxt = context.getOwner();

    if ( isalpha(ctxt.peek()) )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.consume();
            context.setState(StateMap::word_state);
        }
        catch (...)
        {
            context.setState(StateMap::word_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( isdigit(ctxt.peek()) )

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.consume();
            context.setState(StateMap::word_state);
        }
        catch (...)
        {
            context.setState(StateMap::word_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( ctxt.peek() == ' ' )

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.token_end();
            ctxt.consume();
            context.setState(StateMap::white_space_state);
        }
        catch (...)
        {
            context.setState(StateMap::white_space_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( ctxt.peek() == ':' )

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.fix_state();
            ctxt.token_end();
            ctxt.increase_state();
            ctxt.consume();
            context.setState(StateMap::double_dot_state);
        }
        catch (...)
        {
            context.setState(StateMap::double_dot_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( ctxt.is_operation_sign(ctxt.peek()) && ctxt.get_state() == 4)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.token_end();
            ctxt.increase_state();
            ctxt.consume();
            context.setState(StateMap::oper_state);
        }
        catch (...)
        {
            context.setState(StateMap::oper_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( ctxt.peek() == '\n' && ctxt.get_state() == 6)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.token_end();
            ctxt.acceptable();
            context.setState(StateMap::start);
        }
        catch (...)
        {
            context.setState(StateMap::start);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         StateMap_Default::next(context);
    }


}

void StateMap_double_dot_state::next(ParserContext& context)
{
    Parser& ctxt = context.getOwner();

    if ( ctxt.peek() == '=')
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.consume();
            context.setState(StateMap::eq_state);
        }
        catch (...)
        {
            context.setState(StateMap::eq_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         StateMap_Default::next(context);
    }


}

void StateMap_eq_state::next(ParserContext& context)
{
    Parser& ctxt = context.getOwner();

    if ( ctxt.peek() == ' ')
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.consume();
            context.setState(StateMap::white_space_state);
        }
        catch (...)
        {
            context.setState(StateMap::white_space_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( isdigit(ctxt.peek()))

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.token_start();
            ctxt.increase_state();
            ctxt.consume();
            context.setState(StateMap::number_state);
        }
        catch (...)
        {
            context.setState(StateMap::number_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( isalpha(ctxt.peek()))

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.token_start();
            ctxt.increase_state();
            ctxt.consume();
            context.setState(StateMap::word_state);
        }
        catch (...)
        {
            context.setState(StateMap::word_state);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         StateMap_Default::next(context);
    }


}

void StateMap_number_state::next(ParserContext& context)
{
    Parser& ctxt = context.getOwner();

    if ( ctxt.is_operation_sign(ctxt.peek()) && ctxt.get_state() == 4 )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.token_end();
            ctxt.increase_state();
            ctxt.consume();
            context.setState(StateMap::oper_state);
        }
        catch (...)
        {
            context.setState(StateMap::oper_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.peek() == ' ')

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.token_end();
            ctxt.consume();
            context.setState(StateMap::white_space_state);
        }
        catch (...)
        {
            context.setState(StateMap::white_space_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( isdigit(ctxt.peek()) )

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.consume();
            context.setState(StateMap::number_state);
        }
        catch (...)
        {
            context.setState(StateMap::number_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( ctxt.peek() == '\n' && ctxt.get_state() == 6)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.token_end();
            ctxt.acceptable();
            context.setState(StateMap::start);
        }
        catch (...)
        {
            context.setState(StateMap::start);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         StateMap_Default::next(context);
    }


}

void StateMap_oper_state::next(ParserContext& context)
{
    Parser& ctxt = context.getOwner();

    if ( isdigit(ctxt.peek()) )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.token_start();
            ctxt.increase_state();
            ctxt.consume();
            context.setState(StateMap::number_state);
        }
        catch (...)
        {
            context.setState(StateMap::number_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( isalpha(ctxt.peek()))

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.token_start();
            ctxt.increase_state();
            ctxt.consume();
            context.setState(StateMap::word_state);
        }
        catch (...)
        {
            context.setState(StateMap::word_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( ctxt.peek() == ' ' )

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.consume();
            context.setState(StateMap::oper_state);
        }
        catch (...)
        {
            context.setState(StateMap::oper_state);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         StateMap_Default::next(context);
    }


}

void StateMap_white_space_state::next(ParserContext& context)
{
    Parser& ctxt = context.getOwner();

    if ( isalpha(ctxt.peek()) && (ctxt.get_state() == 1 || ctxt.get_state() == 3 || ctxt.get_state() == 5))
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.token_start();
            ctxt.increase_state();
            ctxt.consume();
            context.setState(StateMap::word_state);
        }
        catch (...)
        {
            context.setState(StateMap::word_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( isdigit(ctxt.peek()) && (ctxt.get_state() == 3 || ctxt.get_state() == 5) )

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.token_start();
            ctxt.increase_state();
            ctxt.consume();
            context.setState(StateMap::number_state);
        }
        catch (...)
        {
            context.setState(StateMap::number_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (  ctxt.peek() == ':' && ctxt.get_state() == 2 )

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.increase_state();
            ctxt.consume();
            context.setState(StateMap::double_dot_state);
        }
        catch (...)
        {
            context.setState(StateMap::double_dot_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (  ctxt.peek() == ' ' )

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.consume();
            context.setState(StateMap::white_space_state);
        }
        catch (...)
        {
            context.setState(StateMap::white_space_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( ctxt.is_operation_sign(ctxt.peek()) && ctxt.get_state() == 4 )

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.increase_state();
            ctxt.consume();
            context.setState(StateMap::oper_state);
        }
        catch (...)
        {
            context.setState(StateMap::oper_state);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         StateMap_Default::next(context);
    }


}

//
// Local variables:
//  buffer-read-only: t
// End:
//
